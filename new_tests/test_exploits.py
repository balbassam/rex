#!/usr/bin/env python
import os
import sys
import archr
import rex
import logging

bin_location = str(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'binaries/'))
tests_dir = str(os.path.dirname(os.path.realpath(__file__)))

def _make_archr_target_from_binary(binary_path, arch='x86_64'):
    path = os.path.join(bin_location, binary_path)
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")

    target = archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch=arch).build().start()
    return target

def _check_arsenal_has_send(arsenal):
    # Test that the script generated for the arsenal has sends (i.e. is not null)
    for exploit in arsenal.values():
        exploit.script()
        # print(exploit._script_string)
        assert "r.send" in exploit._script_string

def test_stack_smash_shellcode():
    inp = b"A" * 250
    path = os.path.join(bin_location, "stack_smash_exec_stack")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")
    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()

        # make sure we're able to exploit it to call shellcode
        assert 'call_shellcode' in exploit.arsenal
        _check_arsenal_has_send(exploit.arsenal)

def test_stack_smash_rop():
    inp = b"A" * 250
    path = os.path.join(bin_location, "stack_smash_no_exec_stack")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")
    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()

        # make sure we're able to exploit it to rop
        assert 'rop_register_control' in exploit.arsenal
        _check_arsenal_has_send(exploit.arsenal)

def _test_direct_stack_write_shellcode():
    inp = b"2\n143\nA\n3"
    path = os.path.join(bin_location, "unbounded_byte_write_stack_exec_stack")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")
    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()
        _check_arsenal_has_send(exploit.arsenal)

def _test_direct_stack_write_rop():
    inp = b"2\n-143\nA\n3"
    path = os.path.join(bin_location, "unbounded_byte_write_stack_no_exec_stack")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")
    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()
        _check_arsenal_has_send(exploit.arsenal)

def _test_format_string_fortify_0():
    inp = b"AAAA.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n.%n"
    path = os.path.join(bin_location, "fmt_str_attack_FORTIFY_0")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")

    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path],
                                   path,
                                   target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        # exploit = crash.exploit()
        # crash.project.loader.close()

        # _check_arsenal_has_send(exploit.arsenal)

def _test_format_string_fortify_1():
    inp = b"AAAA%x.%x.%x.%x.%x.%x."
    path = os.path.join(bin_location, "fmt_str_attack_FORTIFY_1")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")

    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path],
                                   path,
                                   target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()

        _check_arsenal_has_send(exploit.arsenal)

def _test_format_string_fortify_2():
    inp = b"AAAA%x.%x.%x.%x.%x.%x."
    path = os.path.join(bin_location, "fmt_str_attack_FORTIFY_2")
    lib_path = os.path.join(bin_location, "library/x86_64")
    ld_path = os.path.join(lib_path, "ld-linux-x86-64.so.2")

    with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path],
                                   path,
                                   target_arch='x86_64').build().start() as target:
        crash = rex.Crash(target, inp, fast_mode=True, aslr=False)

        exploit = crash.exploit()
        crash.project.loader.close()

        _check_arsenal_has_send(exploit.arsenal)

def run_all():
    functions = globals()
    all_functions = dict(filter((lambda kv: kv[0].startswith('test_')), functions.items()))
    for f in sorted(all_functions.keys()):
        if hasattr(all_functions[f], '__call__'):
            print(f)
            all_functions[f]()

if __name__ == "__main__":
    logging.getLogger("rex").setLevel("DEBUG")
    logging.getLogger("povsim").setLevel("DEBUG")
    logging.getLogger('archr').setLevel('DEBUG')
    #logging.getLogger("angr.state_plugins.preconstrainer").setLevel("DEBUG")
    logging.getLogger("angr.simos").setLevel("DEBUG")
    logging.getLogger("angr.exploration_techniques.tracer").setLevel("DEBUG")
    logging.getLogger("angr.exploration_techniques.crash_monitor").setLevel("DEBUG")

    if len(sys.argv) > 1:
        globals()['test_' + sys.argv[1]]()
    else:
        run_all()
